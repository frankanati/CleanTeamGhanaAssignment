document.addEventListener('OMContentLoad', () => {
  const grid = document.querySelector('.grid')
  const scoreDisplay = document.getElementById('score')
  const width = 8
  const square = []
  let score = 0

  const candyColors = [
    'red',
    'yellow',
    'orange',
    'purple',
    'green',
    'blue'

  ]


  // Board creating
  function createBoard() {
    for (let i = 0; i < width*width; i++) {
        const square = document.createElement('div')
        square.setAttribute('draggable', true )
        square.setAttribute('id', i)
        let randomColor = Math.floor(Math.random() * candyColors.length)
        square,style.backgroundColor = candyColors[randomColor ]
        grid.appendChild(square)
        square.push(square)
    }
   }
   createBoard()

//Square draggable
let colorBeingDragged
let colorBeingReplaced
let squareIdBeingDragged
let squareIdBeingReplaced

square.forEach(square.addEventListener('dragstart', dragStart))
square.forEach(square.addEventListener('dragend', dragEnd))
square.forEach(square.addEventListener('dragover', dragOver))
square.forEach(square.addEventListener('dragenter', dragEnter))
square.forEach(square.addEventListener('dragleave', dragLeave))
square.forEach(square.addEventListener('drop ', dragDrop))

function dragStart() {
  colorBeingDragged = this.style.backgroundColor
  squareIdBeingDragged = parseInt(this.id)
  console.log(colorBeingDragged)
  console.log(this.id, 'dragstart')
}


function dragOver() {
  console.log(this.id, 'dragover')
}


function dragEnter(e) {
  e.preventDefault()
  console.log(this.id, 'dragenter')
}


function dragLeave() {
  console.log(this.id, 'dragleave')
}


function dragEnd() {
  console.log(this.id, 'dragend')
  let validMoves = [squareIdBeingDragged -1, 
  squareIdBeingDragged -width,
  squareIdBeingDragged +1,
  squareIdBeingDragged +width]

  let validMove = validMoves.includes(squareIdBeingReplaced)

  if (squareIdBeingReplaced && validMove) {
    squareIdBeingReplaced = null
  }
  else if (squareIdBeingReplaced && !validMove) {
    square[squareIdBeingReplaced].style.backgroundColor = colorBeingReplaced
    square[squareIdBeingDragged].style.backgroundColor = colorBeingDragged
  }
  else square[squareIdBeingDragged].style.backgroundColor = colorBeingDragged
}


function dragDrop() {
  colorBeingReplaced = this.style.backgroundColor
  squareIdBeingReplaced = parseInt(this.id)
  thi.style.backgroundColor = colorBeingDragged
  square[squareIdBeingReplaced].style.backgroundColor = colorBeingReplaced
  console.log(this.id, 'dragdrop')
}



// Drop candies once colorBeingDragged
function moveDown() {
  for (i = 0; i < 55, i++) {
    if (square[i + width].style.backgroundColor === '') {
      square[i + width].style.backgroundColor = square[i].style.backgroundColor
      square[i].style.backgroundColor = ''
      const firstRow = [0, 1, 2, 3, 4, 5, 6, 7]
      const isFirstRow = firstRow.includes(i)
      if (isFirstRow && square[i].style.backgroundColor === '') {
        let randomColor = Math.floor(Math.random() * candyColors.length)
        square[i].style.backgroundColor = candyColors[randomColor]
      }
    }
  }
}



// Check matches
// Check row of four
function checkRowForFour() {
  for (i = 0; i < 60; i++) {
    let rowOfFour = [i, i+1, i+2, i+3]
    let ldecidedColor = square[i].style.backgroundColor
    const isBlank = square[i].style.backgroundColor === ''

    const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55]
    if (notValid.includes(i)) continue
    if (rowOfFour.every(index => square[index].style.backgroundColor === decidedColor && !isBlank))
    score += 4
    scoreDisplay.innerHTML = score
      rowOfFour.forEach(index => {
        Square[index].style.backgroundColor = ''
      })
  }
} 

checkRowForFour()


// Check column of Four
function checkColumnForFour() {
  for (i = 0; i < 47; i++) {
    let columnForFour = [i, i+width,i+width*2, i+width*3]
    let ldecidedColor = square[i].style.backgroundColor
    const isBlank = square[i].style.backgroundColor === ''
    if (columnOfFour.every(index => square[index].style.backgroundColor === decidedColor && !isBlank))
    score += 4
    scoreDisplay.innerHTML = score
      columnOfFour.forEach(index => {
        Square[index].style.backgroundColor = ''
      })
  }
}

checkcolumnForFour()




// Check row of three
function checkRowForThree() {
  for (i = 0; i < 61; i++) {
    let rowOfThree = [i, i+1,i+2]
    let ldecidedColor = square[i].style.backgroundColor
    const isBlank = square[i].style.backgroundColor === ''

    const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55]
    if (notValid.includes(i)) continue
    if (rowOfThree.every(index => square[index].style.backgroundColor === decidedColor && !isBlank))
    score += 3
    scoreDisplay.innerHTML = score
      rowOfThree.forEach(index => {
        Square[index].style.backgroundColor = ''
      })
  }
} 

checkRowForThree()


// Check column of three
function checkColumnForThree() {
  for (i = 0; i < 47; i++) {
    let columnOfThree = [i, i+width,i+width*2]
    let ldecidedColor = square[i].style.backgroundColor
    const isBlank = square[i].style.backgroundColor === ''
    if (columnOfThree.every(index => square[index].style.backgroundColor === decidedColor && !isBlank))
    score += 3
    scoreDisplay.innerHTML = score
      columnOfThree.forEach(index => {
        Square[index].style.backgroundColor = ''
      })
  }
}

checkcolumnForThree()



window.setInterval(function(){
  moveDown()
  checkRowForFour()
  checkColumnForFour()
  checkRowForThree()
  checkColumnForThree()
}, 100)

})




